"""
io_functions

Code that deals with parsing/reading/reporting input and output


"""


from . configs import VALID, VALID_2_ONELETTER, SPACER_1


# ******************************************************************
def readfile(filename):
    """
    Function that takes a filestring as input and converts it into a list of lines,
    returning the list. Nothing fancy.

    """
    with open(filename) as fh:
        content = fh.readlines()
    return content



# ******************************************************************
def error_exit(msg):
    print("")
    print("###################################################################################################################################################")
    print("ERROR:  %s"  % str((msg)))
    print("")
    print("###################################################################################################################################################")
    exit(1)



# ******************************************************************
def parse_residue_string(rstring):

    """
    Function that takes an input residue string (ALA_CYS_ASP_...) and converts it into a list of valid
    amino acid three letter codes ($valid_res), returning the list
    """
    
    # split the residue string up using '_'
    split_string = rstring.strip().upper().split("_")
    valid_res =[]

    # for each residue name as extracted from the XXX_XXX_XXX string...
    for r in split_string:
        
        if r not in VALID:
            print("[WARNING]: Residue [%s] is not recognized as a valid residue" %(r))
            continue

        elif r == 'GLY':
            print("[WARNING]: GLYCINE cannot be changed without changing ALL the backbone. To avoid unintented consequences, please use PEP-BB instead of GLY. This residue is being ignored")
            continue

        elif r == 'HIS' or r == "HIE" or r == "HID" or r == "HIP":
            print("[INFO]:    All verisons of histadine (HIS/HID/HIE/HIP) are treated the same")

            # note campari doesn't use HIS, so neutral histadine is generally represented as HIE 
            valid_res.append('HIE')
            valid_res.append('HID')
            valid_res.append('HIP')
            continue

        # change the dash for an underscore - for ease we define the backbone as PEP-BB in the input string, but once 
        # parsed better to convert to PEP_BB (so underscore instead of dash)
        elif r == 'PEP-BB':
            valid_res.append('PEP_BB')
            continue

        valid_res.append(r)

    return valid_res


# ******************************************************************
def _discard_comment(line):
    """ Function that discards anything after the first comment symbol
    """
    return line.strip().split('#')[0]



#
def update_ABSINTH_parameter_file(inname, outname, residues, FOS_MODE, FOS_value, FOS_offset):

    # read in parameter file
    content = readfile(inname)

    # open a new file and then cycle through each line of the previously read
    with open(outname, 'w') as fh:
        fh.write("### This file was generated by rewire_fos V %i.%i on  %s \n \n" % (MAJOR,MINOR,strftime("%Y-%m-%d %H:%M:%S", gmtime())))

        # for each line in the original ABSINTH parameter file...
        for line in content:

            # remove the comment and split the line by whitespace
            l = _discard_comment(line)
            sl = l.split()

            # if this line contains parameter information...
            if len(sl) == 3:

                # if the file is a fos line...
                if sl[0].lower() == 'fos':

                    # if the residue in question is one of the ones we want to change...
                    if sl[1].upper() in residues:

                        # change the value using the approriate approach depending on mode, and the
                        # print that this has changed
                        if FOS_MODE == 2:
                            new_val = FOS_value
                        elif FOS_MODE == 1 or FOS_MODE == 3:
                            new_val = float(sl[2].upper()) + FOS_offset

                        print("Updating residue %s from %s to %5.1f" % (sl[1].upper(), sl[2], new_val ))
                        fh.write("fos%s%s %5.1f # UPDATED by rewire_fos.py\n" %(SPACER_1, sl[1].upper(), new_val))

                    else:
                        fh.write(line)
                else:
                    fh.write(line)
            else:
                fh.write(line)

    print("")        
    print("File [%s] written succesfully" % outname)
    print("")        
    print("")        
